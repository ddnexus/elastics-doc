table.code-topics#activemodel-class-methods cellspacing=0 cellpadding=0
  tr
    td
      code attribute :properties
    td
      markdown:
        The `attribute` method is implemented by [active_attr](https://github.com/cgriego/active_attr). `Flex::ActiveModel` extends it so it accepts a `:properties` argument that is used by flex to generate the maping.
      | {% shighlight ruby %}
        attribute :price, :properties => {'type' => 'float'}, :default => 0
        {% endshighlight %}

  tr
    td
      code attribute :analyzed
    td
      markdown:
        The `attribute` method is implemented by [active_attr](https://github.com/cgriego/active_attr). `Flex::ActiveModel` extends it so it accepts a `:analyzed` argument that is expanded to `:properties => { 'type' => 'string', 'index' => 'not_analyzed' }` and used by flex to generate the maping.

      | {% shighlight ruby %}
        attribute :code, :analyzed => false
        {% endshighlight %}

  tr
    td
      code attribute :not_analyzed
    td
      markdown:
        Same as `:analized` but with inverted logic

      | {% shighlight ruby %}
        attribute :code, :not_analyzed => true
        {% endshighlight %}

  tr
    td
      code attribute_created_at
    td
      markdown:
        Adds the `created_at` attribute wich will be automatically filled by the date of the creation.

  tr
    td
      code attribute_updated_at
    td
      markdown:
        Adds the `updated_at` attribute wich will be automatically filled by the date of the update.

  tr
    td
      code attribute_timestamps
    td
      markdown:
        Shortcut that calls both `attribute_created_at` and `attribute_updated_at`.

  tr
    td
      code attribute_attachment
    td
      markdown:
        Defines an attachment attribute that integrates with [elasticsearch-mapper-attachments](https://github.com/elasticsearch/elasticsearch-mapper-attachments):

        * if you omit the arguments it uses :attachment as the `<attachment_field_name>`
        * you can also pass other properties that will be merged with the default property for attachment
        * it automatically adds a `:<attachment_field_name>_scope` scope which will add all the meta fields (title, author, ...) to the returned fields, exluding the `<attachment_field_name>` field itself, and including all the other attributes declared __before__ it. For that reason you may want to declare it as the latest attribute.

        You can rely on the defaults, or you can override what you need. For example:

      | {% shighlight ruby %}
        # adds a default 'attachment' attribute and a 'attachment_scope' scope
        attribute_attachment
        # adds a 'page' attribute and a 'page_scope' scope
        attribute_attachment :page
        # adds a 'file' attribute with explicit properties and a 'file_scope' scope
        attribute_attachment :file, { :properties => { 'fields' => { 'file'   => { 'index'    => 'no' },
                                                                     'title'  => { 'store'    => 'yes' },
                                                                     'author' => { 'analyzer' => 'myAnalizer' } } } }

        # a scope that returns the added fields, highlights and a query
        scope :searchable do |query|
           attachment_scope
          .highlight(:fields => { :attachment          => {},
                                  :'attachment.title'  => {},
                                  :'attachment.author' => {} })
          .query_string(query)
        end

        # pass the attachments as encoded strings, as required by the plugin
        MyModel.create :my_attr    => 'foo',
                       :attachment => Base64.encode64(the_attachment),
                       :page       => Base64.encode64(the_page),
                       :file       => Base64.encode64(the_file)

        result = MyModel.searchable(the_query_string).first

        # the nested fields like 'page.title' and 'page.author' are accessible in ruby as flattened-name methods
        puts result.page_title + result.page_author

        {% endshighlight %}
