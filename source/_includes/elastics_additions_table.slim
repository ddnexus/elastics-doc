table.code-topics.api-methods cellspacing=0 cellpadding=0
  ///////////////////////////////////////////////////////////////////////////
  tr
    th colspan=2 id='elastics_additions'
      | Elastics Additions

  tr
    td
      code  Elastics.match_all
    td
      markdown:

        Not a real API method, but handy:

        **Template**

      |
        {% shighlight yaml %}
        match_all:
        - GET
        - /<<index>>/<<type>>/_search
        - query:
            match_all: {}
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.match_all :index => "elastics_test_index",
                           :type  => nil
        {% endshighlight %}


  tr
    td
      code  Elastics.search_by_id
    td
      markdown:
        Get a document without using the get API (which doesn't support fields '\*')

        **Template**

      |
        {% shighlight yaml %}
        search_by_id:
        - GET
        - /<<index>>/<<type>>/_search
        - query:
            term:
              _id: <<id>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.search_by_id :id      => id,    # required
                              :type    => nil,
                              :index   => "elastics_test_index"
        {% endshighlight %}

      markdown:
        > This method uses the search API, which is not real-time like the get API. You may want to refresh the index with `Elastics.refresh_index`, before calling it.

  tr
    td
      code YourClass.elastics.multi_search
    td
      markdown:

        > This method is documented here because it is an elasticsearch API method, however it is defined into your `elastics` proxy included by `Elastics::Templates`.

        The method allows you to do multi-searching by using multiple templates defined by your class. It takes 2 arguments. The first is a required hash with the templates names as the keys and the variable hash as the values. You can also use an array of arrays. The second is an optional hash of variables that will be used to render the `multi_search` template. The array of responses is available as `responses` method.

        **Template**

      |
        {% shighlight yaml %}
        multi_search:
        - GET
        - /<<index>>/<<type>>/_msearch
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        result = MyClass.elastics.multi_search({:my_search_a => {:a_var => 'foo'},
                                                :my_search_b => {:another_var => 'bar'},
                                               {:index => 'another_index'})

        result.responses.each{|r| r.do_something }
        {% endshighlight %}


  tr
    td
      code  Elastics.scan_search
    td
      markdown:
        Generic implementation of the [elasticsearch search_type API](http://www.elasticsearch.org/guide/reference/api/search/search-type) of type `scan`. It passes the raw result to the block.

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.scan_search(:my_template, my_vars) do |result|
          result['hits']['hits'].each{|d|do_something_with(d)}
        end
        {% endshighlight %}

  tr
    td
      code  Elastics.scan_all
    td
      markdown:
        Specific implementation of the [elasticsearch search_type API](http://www.elasticsearch.org/guide/reference/api/search/search-type) of type `scan`, applied to the `match_all` template/query. It passes an array of documents to the block.

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.scan_all(my_vars) do |batch|
          batch.each{|d|do_something_with(d)}
        end
        {% endshighlight %}

  tr
    td
      code  Elastics.dump_all
    td
      markdown:
        It `flush_index` and call `scan_all`, with added `{:params => {:fields => '*,_source'}}`. Used to include all the relevant fields from a document:

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.dump_all(my_vars) do |batch|
          batch.each{|d|do_something_with(d)}
        end
        {% endshighlight %}

  tr
    td
      code  Elastics.dump_one
    td
      markdown:
        It `flush_index` and call `search_by_id`, with added `{:params => {:fields => '*,_source'}}`. Used to include all the relevant fields from the document:

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Elastics.dump_one :id      => id,    # required
                          :type    => nil,
                          :index   => "elastics_test_index"
        {% endshighlight %}
