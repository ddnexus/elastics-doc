table#comparison cellspacing=0 cellpadding=0

  tr
    th Flex
    th Tire

  tr
    td.green Implements the full elasticsearch API as ready to use methods
    td.orange Implements only a subset of some elasticsearch API

  tr
    td.green Allows to compose every possible elasticsearch search query
    td.orange Only allows a few predetermined queries

  tr
    td.green Expresses queries in YAML, JSON or ruby, matching 1 to 1 with the elasticsearch API
    td.orange Expresses queries in its own DSL, not matching with the elasticseach API

  tr
    td.green Very configurable, detailed and easy to read logging system and debugging info
    td.orange Standard one-line logging

  tr
    td.green Uses meta-programming to automatically define query methods in your own classes, complete with variable checks and feedback
    td.red N/A

  tr
    td.green Can reuse any fragment of any query in any other query
    td.red N/A

  tr
    td.green Implements ActiveRecord-like scopes, for easy search and reuse in pure ruby
    td.red N/A

  tr
    td.green Implements a self-documentation tool that generates detailed documentation and usage for your custom queries
    td.red N/A

  tr
    td.green Implements Cascading Variables, with easy interpolation, deep-merging and overwriting
    td.red N/A

  tr
    td.green Implements a few mechanism to generate data-driven dynamic queries (with partials and pruning)
    td.red N/A

  tr
    td.green Implements an useful backup system (binary and rake tasks), to dump and load any index (not only those in your apps)
    td.red N/A

  tr
    td.green Integrates with elasticsearch-mapper-attachment plugin
    td.red N/A

  tr
    td.green Enforces a clean separation between the elasticsearch logic and the application logic
    td.red N/A

  tr
    td.green The original and complete elasticsearch response (extended with useful methods) is always accessible
    td.red N/A

  tr
    td.green Implements parent/child relationships, also polymorphic, transparently managing mapping, routing and parent
    td.red N/A

  tr
    td.green Supports cross-syncing (i.e. you can declare that a model change will sync another models with the index)
    td.red N/A

  tr
    td.green Its development is funded by 2 sponsors
    td.red N/A

  tr
    td.red Does not have a dedicated testing suite yet
    td.green Has a dedicated testing suite

  tr
    td.orange It is still quite recent so it has a smaller user-base
    td.green It has been around for a few years so it has a bigger user-base
