table.code-topics#api-methods cellspacing=0 cellpadding=0
  tr
    td
      code Flex.indices_exists
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-indices-exists.html)

        **Template**

      |
        {% shighlight yaml %}
        indices_exists:
        - HEAD
        - /<<index>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.indices_exists :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.exist?
    td
      markdown:
        Alias for `Flex.indices_exists`

  tr
    td
      code Flex.create_index
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index.html)

        **Template**

      |
        {% shighlight yaml %}
        create_index:
        - PUT
        - /<<index>>
        - settings:
            number_of_shards: <<number_of_shards= 5 >>
            number_of_replicas: <<number_of_replicas= 1 >>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.create_index :index              => "flex_test_index",
                          :number_of_shards   => 5,
                          :number_of_replicas => 1
        {% endshighlight %}

  tr
    td
      code Flex.put_index
    td
      markdown:
       Alias for `Flex.create_index` (defined for symmetry with `Flex.post_index`)

  tr
    td
      code Flex.post_index
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index.html)

        **Template**

      |
        {% shighlight yaml %}
        post_index:
        - POST
        - /<<index>>
        - settings:
            number_of_shards: <<number_of_shards= 5 >>
            number_of_replicas: <<number_of_replicas= 1 >>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.post_index :index              => "flex_test_index",
                        :number_of_shards   => 5,
                        :number_of_replicas => 1
        {% endshighlight %}

  tr
    td
      code Flex.get_settings
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings.html)

        **Template**

      |
        {% shighlight yaml %}
        get_settings:
        - GET
        - /<<index>>/_settings
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.get_settings :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.put_mapping
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping.html)

        **Template**

      |
        {% shighlight yaml %}
        put_mapping:
        - PUT
        - /<<index>>/<<type>>/_mapping
        - <<type>>:
            properties: <<properties>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.put_mapping :properties => properties,       # required
                         :type       => nil,
                         :index      => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.get_mapping
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping.html)

        **Template**

      |
        {% shighlight yaml %}
        get_mapping:
        - GET
        - /<<index>>/<<type>>/_mapping
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.get_mapping :index => "flex_test_index",
                         :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.delete_mapping
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping.html)

        **Template**

      |
        {% shighlight yaml %}
        delete_mapping:
        - DELETE
        - /<<index>>/<<type>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.delete_mapping :index => "flex_test_index",
                            :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.delete_index
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/delete.html)

        **Template**

      |
        {% shighlight yaml %}
        delete_index:
        - DELETE
        - /<<index>>

        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.delete_index :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.delete_by_query
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/delete-by-query.html)

        **Template**

      |
        {% shighlight yaml %}
        delete_by_query:
        - DELETE
        - /<<index>>/<<type>>/_query
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.delete_by_query :index => "flex_test_index",
                             :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.bulk
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/bulk.html)

        **Template**

      |
        {% shighlight yaml %}
        bulk:
        - POST
        - /_bulk
        - << lines >>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.bulk :lines => lines   # required
        {% endshighlight %}

  tr
    td
      code Flex.count
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/count.html)

        **Template**

      |
        {% shighlight yaml %}
        count:
        - GET
        - /<<index>>/<<type>>/_count
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.count :index => "flex_test_index",
                   :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.stats
    td
      markdown:

        **Template**

      |
        {% shighlight yaml %}
        stats:
        - GET
        - /<<index>>/_stats/<<endpoint= ~ >>/<<type= ~ >>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.stats :index    => "flex_test_index",
                   :endpoint => nil,
                   :type     => nil
        {% endshighlight %}

  tr
    td
      code Flex.store
    td
      markdown:
        Stores a document into the index using `PUT`. You must pass also the `:data` variable.

        **Template**

      |
        {% shighlight yaml %}
        store:
        - PUT
        - /<<index>>/<<type>>/<<id>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.store :id    => id,               # required
                   :type  => nil,
                   :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.put_store
    td
      markdown:
        Alias of `Flex.store` (defined for symmetry with `Flex.post_store`)

  tr
    td
      code Flex.post_store
    td
      markdown:
        Stores a document into the index: the `:id` is assigned by elasticsearch; you must pass the `:data` variable.

        **Template**

      |
        {% shighlight yaml %}
        post_store:
        - POST
        - /<<index>>/<<type>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.post_store :index => "flex_test_index",
                        :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.remove
    td
      markdown:
        Removes a document from the index.

        **Template**

      |
        {% shighlight yaml %}
        remove:
        - DELETE
        - /<<index>>/<<type>>/<<id>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.remove :id    => id,               # required
                    :type  => nil,
                    :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.get
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/get.html)

        Retrieves a document from the index.

        **Template**

      |
        {% shighlight yaml %}
        get:
        - GET
        - /<<index>>/<<type>>/<<id>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.get :id    => id,               # required
                 :type  => nil,
                 :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.get_source
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/get.html)

        Retrieves a the source of document from the index.

        **Template**

      |
        {% shighlight yaml %}
        get:
        - GET
        - /<<index>>/<<type>>/<<id>>/_source
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.get_source :id    => id,               # required
                        :type  => nil,
                        :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.multi_get
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/multi-get.html)

        **Template**

      |
        {% shighlight yaml %}
        multi_get:
        - GET
        - /<<index>>/<<type>>/_mget
        - ids: << ids >>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.multi_get :ids   => ids,              # required
                       :type  => nil,
                       :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.put_percolator
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/percolate.html)

        **Template**

      |
        {% shighlight yaml %}
        put_percolator:
        - PUT
        - /_percolator/<<index>>/<<name>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.put_percolator :name  => name,       # required
                            :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.delete_percolator
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/percolate.html)

        **Template**

      |
        {% shighlight yaml %}
        delete_percolator:
        - DELETE
        - /_percolator/<<index>>/<<name>>
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.delete_percolator :name  => name,       # required
                               :index => "flex_test_index"
        {% endshighlight %}

  tr
    td
      code Flex.percolate
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/percolate.html)

        You must pass the document (and additional queries) as the `:data` variable)

        **Template**

      |
        {% shighlight yaml %}
        percolate:
        - GET
        - /<<index>>/<<type>>/_percolate
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.percolate :index => "flex_test_index",
                       :type  => nil
        {% endshighlight %}

  tr
    td
      code Flex.more_like_this
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/more-like-this.html)

        You can pass the search API (facets, from/to and so on) as the `:data` variable)

        **Template**

      |
        {% shighlight yaml %}
        more_like_this:
        - GET
        - /<<index>>/<<type>>/<<id>>/_mlt
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.more_like_this :id    => id,          # required
                            :index => "flex_test_index",
                            :type  => nil
        {% endshighlight %}

  tr
    td
      code  Flex.mlt
    td
      markdown:
        Alias for `Flex.more_like_this`

  tr
    td
      code  Flex.match_all
    td
      markdown:

        Not a real API method, but handy:

        **Template**

      |
        {% shighlight yaml %}
        match_all:
        - GET
        - /<<index>>/<<type>>/_search
        - query:
            match_all: {}
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        Flex.match_all :index => "flex_test_index",
                       :type  => nil
        {% endshighlight %}

  tr
    td
      code YourClass.flex.multi_search
    td
      markdown:
        [elasticsearch API](http://www.elasticsearch.org/guide/reference/api/multi-search.html)

        > This method is documented here because it is an elasticsearch API method, however it is defined into your `flex` proxy included by `Flex::Templates`.

        **Template**

      |
        {% shighlight yaml %}
        multi_search:
        - GET
        - /<<index>>/<<type>>/_msearch
        {% endshighlight %}

      markdown:
        **Usage**

      |
        {% shighlight ruby %}
        result = MyClass.flex.multi_search({:my_search_a => {:a_var => 'foo'},
                                            :my_search_b => {:another_var => 'bar'},
                                           {:index => 'another_index'})

        result.responses.each{|r| r.do_something }
        {% endshighlight %}

      markdown:
        The method allows you to do multi-searching by using multiple templates defined by your class. It takes 2 arguments. The first is a required hash with the templates names as the keys and the variable hash as the values. You can also use an array of arrays. The second is an optional hash of variables that will be used to render the `multi_search` template. The array of responses is available as `responses` method.
