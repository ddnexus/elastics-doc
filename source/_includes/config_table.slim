table.code-topics#config cellspacing=0 cellpadding=0
  tr
    td
      code result_extenders
    td
      markdown:
        An array of extender modules. Each gem pushes its default:

      |
        {% shighlight ruby %}
        # elastics gem
        [ Elastics::Result::Document,
          Elastics::Result::Search,
          Elastics::Result::MultiGet,
          Elastics::Result::Bulk ]

        # elastics-models gem
        [ Elastics::Result::DocumentLoader,
          Elastics::Result::SearchLoader,
          Elastics::Result::ActiveModel ]

        # elastics-scopes gem
        [ Elastics::Result::Scope ]
        {% endshighlight %}

      markdown:
        You usually push your own extenders to the `result_extenders` array {% see 2.4 %}

  tr
    td
      code ansi
    td
      markdown:

        Boolean. If `true` prints logs and progress bars in colored ANSI. Default `true` (when supported).

  tr
    td
      code logger
    td
      markdown:
        The Elastics logger. Default `Logger.new(STDERR)`

  tr
    td
      code logger.debug_variables
    td
      markdown:
        Boolean. If `true` it prints the merged variables. Default `true` unless in Rails Console.

  tr
    td
      code logger.debug_request
    td
      markdown:
        Boolean. If `true` it prints the request. Default `true`.

  tr
    td
      code logger.debug_result
    td
      markdown:
        Boolean. If `true` it prints also the result. Default `true` unless in Rails Console.

  tr
    td
      code logger.curl_format
    td
      markdown:
       Boolean. If `true` it uses curl-like logging info, suitable to be copied and pasted in a terminal. Default `false` (YAML logging).

  tr
    td
      code logger.log_to_rails_logger
    td
      markdown:
        > This is a specific configuration for the `elastics-rails` gem.

        Boolean. If `true` it forwards the messages to the `Rails.logger`. Defaut `true` unless in Rails Console.

  tr
    td
      code logger.log_to_stdout
    td
      markdown:
        > This is a specific configuration for the `elastics-rails` gem.

        Boolean. Option added by elastics-rails. If `true` prints the log to `STDOUT`. Default `false` unless in Rails Console.

  tr
    td
      code elastics_models
    td
      markdown:
        > This is a specific configuration for the `elastics-models` gem.

        An array of model classes (or model class names) that your app will index. This is the only required configuration setting if you use the `Elastics::ModelIndexer` integration, since it is used to generate the default mappings and the default models for the `import` task.

  tr
    td
      code elastics_active_models
    td
      markdown:
        > This is a specific configuration for the `elastics-models` gem.

        An array of ActiveModel classes (or model class names) that your app defines. This is the only required configuration setting if you use the `Elastics::ActiveModel` integration, since it is used to generate the default mappings.

  tr
    td
      code elastics_dir
    td
      markdown:
        The path where Elastics searches for source files. Default `'./elastics'` or `"\#{Rails.root}/app/elastics"` in Rails.

  tr
    td
      code config_file
    td
      markdown:
        A YAML file usually containing the custom index mapping. Default `'./config/elastics.yml'` or `"\#{Rails.root}/config/elastics.yml"` in Rails.

  tr
    td
      code http_client
    td
      markdown:
        The HTTP client instance. Default an object of class `Elastics::HttpClients::Patron` or `Elastics::HttpClients::RestClient`, depending on which gem you have installed (`patron` or `rest-client`). If you create a custom client class you must set it.

        > __Temporary Note__: The `patron` gem currently available on rubygem (v0.4.18) is missing the support for sending data with delete queries. As the result it fails with the `delete_by_query` elasticsearch API, when the query is the request body and not the param. If you want full support until a new version will be pushed to rubygems, you should use `gem 'patron', :git => 'https://github.com/patron/patron.git'` or switch to the `rest-client` gem.

  tr
    td
      code http_client.base_uri
    td
      markdown:
        The base uri of the elasticsearch server used for all the requests. Default `'http://localhost:9200'`.
  tr
    td
      code http_client.options
    td
      markdown:
        Hash of options passed to the `http_client#new` method. Default `{}`.

  tr
    td
      code http_client.raise_proc
    td
      markdown:
        > This variable is experimental and may be removed in a next vesion.

        A proc that should return whether or not to raise an error, depending on the response. It is used for example to decide whether a 404 response code should raise an error or should just be ignored. Default `proc{|respose| response.status >= 400}`

  tr
    td
      code variables
    td
      markdown:
        The `Elastics::Variable` object (Hash subclass) of interpolation variables used as the lowest default level. Default:
      |
        {% shighlight ruby %}
        Elastics::Variables.new :index      => nil,
                               :type       => nil,
                               :params     => {},
                               :no_pruning => []
        {% endshighlight  %}

      markdown:
        > The `elastics-rails` gem sets the default `variables[:index]` as the `app_id` (see below).

        {% see 2.3.4 %}

  tr
    td
      code
        | app_id
    td
      markdown:
        An unique string used to identify your app. Default: `nil` or the uderscored rails application name, plus the environment in rails. It must be set if you use any `reindex` method. Used by the elastics-reindex feature {% see 6.2 %}.

  tr
    td
      code
        | redis
    td
      markdown:
        The redis client object. Default: `$redis || Redis.current`. Used by the live-reindex feature {% see 6.2 %}.

  tr
    td
      code
        | on_stop_indexing
    td
      markdown:
        A proc that should ensure to stop/suspend all the actions that would produce any change in the indices being live-reindexed. Used by the live-reindex feature and overridden by the `on_stop_indexing` block {% see 6.2#id1 on_stop_indexing %}.

